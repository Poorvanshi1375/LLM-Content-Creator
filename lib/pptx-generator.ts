import PptxGenJS from "pptxgenjs";
import { Buffer } from "buffer";

export async function generatePowerPoint(
  content: string,
  title: string
): Promise<Buffer> {
  const prs = new PptxGenJS();

  // Define layout and set it
  prs.defineLayout({ name: "LAYOUT1", width: 10, height: 7.5 });
  prs.layout = "LAYOUT1";

  // --- TITLE SLIDE ---
  const titleSlide = prs.addSlide();
  titleSlide.background = { color: "0056B3" };

  titleSlide.addText(title, {
    x: 0.5,
    y: 2.5,
    w: 9,
    h: 1.5,
    fontSize: 54,
    bold: true,
    color: "FFFFFF",
    align: "center",
  });

  titleSlide.addText("Generated by AI Content Creator", {
    x: 0.5,
    y: 4.2,
    w: 9,
    h: 0.5,
    fontSize: 18,
    color: "E8F0FF",
    align: "center",
  });

  // --- PREPARE LINES ---
  const lines = content
    .split("\n")
    .map((l) => l.trim())
    .filter((l) => l.length > 0);

  let currentSlideTitle: string | null = null;
  let currentSlideContent: string[] = [];

  // Helper: add content slide
  const addContentSlide = (prs: PptxGenJS, title: string, content: string[]) => {
    const slide = prs.addSlide();
    slide.background = { color: "FFFFFF" };

    // Header bar
    slide.addShape(prs.ShapeType.rect, {
      x: 0,
      y: 0,
      w: 10,
      h: 0.8,
      fill: { color: "0056B3" },
      line: { type: "none" },
    });

    // Title text in header
    slide.addText(title, {
      x: 0.5,
      y: 0.15,
      w: 9,
      h: 0.5,
      fontSize: 24,
      bold: true,
      color: "FFFFFF",
    });

    // Build bullet text objects (runtime structure)
    const bulletText = content.map((item) => ({
      text: item,
      options: {
        bullet: true,
        fontSize: 16,
        color: "333333",
        align: "left",
        breakLine: true,
      },
    }));

    // --- FIX for Type error: cast to any because types may not match installed d.ts ---
    slide.addText(bulletText as any, {
      x: 0.5,
      y: 1.2,
      w: 9,
      h: 5.5,
      valign: "top",
    });

    // --- FIX for Type error: use any to access slides.length at runtime ---
    const slideNum = (prs as any).slides ? (prs as any).slides.length - 1 : undefined;
    // If slideNum defined, show number; otherwise skip
    if (typeof slideNum === "number") {
      slide.addText(`Slide ${slideNum}`, {
        x: 9,
        y: 7,
        w: 0.8,
        h: 0.3,
        fontSize: 10,
        color: "999999",
        align: "right",
      });
    }
  };

  // --- PROCESS LINES ---
  for (const line of lines) {
    if (line.startsWith("##")) {
      // finalize previous
      if (currentSlideTitle && currentSlideContent.length > 0) {
        addContentSlide(prs, currentSlideTitle, currentSlideContent);
      }
      currentSlideTitle = line.substring(2).trim();
      currentSlideContent = [];
    } else if (line.startsWith("*")) {
      if (currentSlideTitle) {
        currentSlideContent.push(line.substring(1).trim());
      }
    }
  }

  // Add final slide if any
  if (currentSlideTitle && currentSlideContent.length > 0) {
    addContentSlide(prs, currentSlideTitle, currentSlideContent);
  }

  // --- WRITE and RETURN A NODE BUFFER ---
  // FIX: cast to any because the TypeScript defs may not include "nodebuffer" overload
  const raw = await (prs as any).write("nodebuffer");

  // Ensure the returned value is a Buffer (convert if needed)
  const nodeBuffer =
    Buffer.isBuffer(raw) ? raw : Buffer.from(raw instanceof ArrayBuffer ? new Uint8Array(raw) : raw);

  return nodeBuffer as Buffer;
}
